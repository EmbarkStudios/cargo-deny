{
  "type": "object",
  "properties": {
    "advisories": {
      "$ref": "#/definitions/Advisories"
    },
    "graph": {
      "$ref": "#/definitions/Graph"
    },
    "output": {
      "$ref": "#/definitions/Output"
    }
  },
  "title": "Configuration file for cargo-deny, by default called `deny.toml`.",
  "description": "Full documentation is at https://embarkstudios.github.io/cargo-deny/checks/cfg.html",
  "definitions": {
    "Advisories": {
      "type": "object",
      "examples": [
        {
          "db-path": "~/.cargo/advisory-dbs",
          "db-urls": [
            "https://github.com/RustSec/advisory-db"
          ],
          "vulnerability": "deny",
          "unmaintained": "warn",
          "unsound": "warn",
          "yanked": "warn",
          "notice": "warn",
          "ignore": [
            "RUSTSEC-0000-0000",
            "crate@0.1",
            {
              "crate": "yanked",
              "reason": "a new version has not been released"
            }
          ],
          "severity-threshold": "medium"
        }
      ],
      "properties": {
        "db-urls": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "uri"
          },
          "description": "URLs to one or more advisory databases.",
          "default": [
            "https://github.com/RustSec/advisory-db"
          ]
        },
        "db-path": {
          "type": "string",
          "description": "Path to the root directory into which one or more advisory databases are cloned into.\n\nThis value supports basic shell expansion:\n\n- `~` - Expands to [`home::home_dir`](https://docs.rs/home/latest/home/fn.home_dir.html)\n- `$VARNAME` - Expands to [`std::env::var(\"VARNAME\")`](https://doc.rust-lang.org/std/env/fn.var.html)\n- `${VARNAME}` - Expands to [`std::env::var(\"VARNAME\")`](https://doc.rust-lang.org/std/env/fn.var.html)\n- `${VARNAME:-fallback}` - Expands to [`std::env::var(\"VARNAME\")`](https://doc.rust-lang.org/std/env/fn.var.html)\n  or the fallback value if it doesn't exist (everything between the `:-` and `}`)\n- `$CARGO_HOME` - Expands to [`std::env::var(\"CARGO_HOME\")`](https://doc.rust-lang.org/std/env/fn.var.html)\n  if it exists, otherwise expands to `$(home::home_dir())/.cargo`\n\nNote that the path must be valid utf-8, after expansion.\n",
          "default": "$CARGO_HOME/advisory-dbs"
        },
        "version": {
          "type": "integer",
          "enum": [
            2
          ],
          "description": "The advisories section has an upcoming breaking change, with deprecation warnings for several\nfields that will be removed. Setting `version = 2` will opt-in to the future default behavior.\n\nThe breaking change is as follows:\n\n- `vulnerability` - Removed, all vulnerability advisories now emit errors.\n- `unmaintained` - Removed, all unmaintained advisories now emit errors.\n- `unsound` - Removed, all unsound advisories now emit errors.\n- `notice` - Removed, all notice advisories now emit errors.\n- `severity-threshold` - Removed, all vulnerability advisories now emit errors.\n\nAs before, if you want to ignore a specific advisory, add it to the `ignore` field.\n",
          "x-taplo": {
            "docs": {
              "enumValues": [
                ""
              ]
            }
          }
        },
        "vulnerability": {
          "type": "string",
          "deprecated": true,
          "enum": [
            "deny",
            "warn",
            "allow"
          ],
          "description": "**DEPRECATED** (see `version` field)\n\nDetermines what happens when a crate with a security vulnerability is encountered.\n",
          "default": "deny",
          "x-taplo": {
            "docs": {
              "enumValues": [
                "Emit an error with details about the problem, and fail the check.",
                "Print a warning for each propblem, but don't fail the check.",
                "Print a note about the problem, but don't fail the check."
              ]
            }
          }
        },
        "unmaintained": {
          "type": "string",
          "deprecated": true,
          "enum": [
            "deny",
            "warn",
            "allow"
          ],
          "description": "**DEPRECATED** (see `version` field)\n\nDetermines what happens when a crate with an `unmaintained` advisory is encountered.\n",
          "default": "warn",
          "x-taplo": {
            "docs": {
              "enumValues": [
                "Emit an error with details about the problem, and fail the check.",
                "Print a warning for each propblem, but don't fail the check.",
                "Print a note about the problem, but don't fail the check."
              ]
            }
          }
        },
        "unsound": {
          "type": "string",
          "deprecated": true,
          "enum": [
            "deny",
            "warn",
            "allow"
          ],
          "description": "**DEPRECATED** (see `version` field)\n\nDetermines what happens when a crate with an `unsound` advisory is encountered.\n",
          "default": "warn",
          "x-taplo": {
            "docs": {
              "enumValues": [
                "Emit an error with details about the problem, and fail the check.",
                "Print a warning for each propblem, but don't fail the check.",
                "Print a note about the problem, but don't fail the check."
              ]
            }
          }
        },
        "notice": {
          "type": "string",
          "deprecated": true,
          "enum": [
            "deny",
            "warn",
            "allow"
          ],
          "description": "**DEPRECATED** (see `version` field)\n\nDetermines what happens when a crate with a `notice` advisory is encountered.\n\n**NOTE**: As of 2019-12-17 there are no `notice` advisories in the\n[RustSec Advisory DB](https://github.com/RustSec/advisory-db)\n",
          "default": "warn",
          "x-taplo": {
            "docs": {
              "enumValues": [
                "Emit an error with details about the problem, and fail the check.",
                "Print a warning for each propblem, but don't fail the check.",
                "Print a note about the problem, but don't fail the check."
              ]
            }
          }
        },
        "yanked": {
          "type": "string",
          "enum": [
            "deny",
            "warn",
            "allow"
          ],
          "description": "Determines what happens when a crate with a version that has been yanked from its source\nregistry is encountered.\n",
          "default": "warn",
          "x-taplo": {
            "docs": {
              "enumValues": [
                "Emit an error with details about the problem, and fail the check.",
                "Print a warning for each propblem, but don't fail the check.",
                "Print a note about the problem, but don't fail the check."
              ]
            }
          }
        },
        "ignore": {
          "type": "array",
          "examples": [
            [
              "RUSTSEC-0000-0000",
              {
                "id": "RUSTSEC-0000-0000",
                "reason": "this vulnerability does not affect us as we don't use the particular code path"
              },
              "yanked@0.1.1",
              {
                "crate": "yanked-crate@0.1.1",
                "reason": "a semver compatible version hasn't been published yet"
              }
            ]
          ],
          "items": {
            "$ref": "#/definitions/AdvisoriesIgnoreItem"
          },
          "description": "Every advisory in the advisory database contains a unique identifier, eg. `RUSTSEC-2019-0001`.\nPutting an identifier in this array will cause the advisory to be treated as a note, rather\nthan a warning or error.\n\nIn addition, yanked crate versions can be ignored by specifying a [PackageSpec](https://embarkstudios.github.io/cargo-deny/checks/cfg.html#package-spec)\nwith an optional `reason`.\n"
        }
      },
      "description": "Checks advisory databases for crates with security vulnerabilities,\nor that have been marked as Unmaintained, or which have been yanked from\ntheir source registry.\n\nThis section is considered when running `cargo deny check advisories`.\n"
    },
    "AdvisoriesIgnoreAdvisory": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "examples": [
            "RUSTSEC-2019-0001"
          ],
          "description": "The unique identifier of the advisory to ignore"
        },
        "reason": {
          "$ref": "#/definitions/IgnoreReason"
        }
      },
      "required": [
        "id"
      ]
    },
    "AdvisoriesIgnoreItem": {
      "oneOf": [
        {
          "name": "String",
          "type": "string",
          "description": "Either an advisory ID (e.g. `RUSTSEC-2019-0001`) or a package spec (e.g. `yanked@0.1.1`)."
        },
        {
          "name": "Advisory",
          "$ref": "#/definitions/AdvisoriesIgnoreAdvisory"
        },
        {
          "name": "Yanked",
          "$ref": "#/definitions/AdvisoriesIgnoreYanked"
        }
      ]
    },
    "AdvisoriesIgnoreYanked": {
      "type": "object",
      "properties": {
        "crate": {
          "$ref": "#/definitions/PackageSpec"
        },
        "reason": {
          "$ref": "#/definitions/IgnoreReason"
        }
      },
      "required": [
        "crate"
      ]
    },
    "Graph": {
      "type": "object",
      "properties": {
        "targets": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Target"
          },
          "description": "By default, cargo-deny will consider every single crate that is resolved by cargo, including\ntarget specific dependencies e.g.\n\n```toml\n[target.x86_64-pc-windows-msvc.dependencies]\nwinapi = \"0.3.8\"\n\n[target.'cfg(target_os = \"fuchsia\")'.dependencies]\nfuchsia-cprng = \"0.1.1\"\n```\n\nBut unless you are actually targeting `x86_64-fuchsia` or `aarch64-fuchsia`, the `fuchsia-cprng` is\nnever actually going to be compiled or linked into your project, so checking it is pointless for you.\n\nThe `targets` field allows you to specify one or more targets which you **actually** build for.\nEvery dependency link to a crate is checked against this list, and if none of the listed targets\nsatisfy the target constraint, the dependency link is ignored. If a crate has no dependency links\nto it, it is not included into the crate graph that the checks are\nexecuted against.\n"
        },
        "exclude": {
          "type": "array",
          "examples": [
            "some-crate@0.1.0"
          ],
          "items": {
            "type": "string"
          },
          "description": "Just as with the [`--exclude`](https://embarkstudios.github.io/cargo-deny/cli/common.html#--exclude-dev)\ncommand line option, this field allows you to specify one or more [Package ID specifications](https://doc.rust-lang.org/cargo/commands/cargo-pkgid.html)\nthat will cause the crate(s) in question to be excluded from the crate graph that is used\nfor the operation you are performing.\n\nNote that excluding a crate is recursive, if any of its transitive dependencies are only referenced\nvia the excluded crate, they will also be excluded from the crate graph.\n"
        },
        "all-features": {
          "type": "boolean",
          "description": "If set to `true`, `--all-features` will be used when collecting metadata."
        },
        "no-default-features": {
          "type": "boolean",
          "description": "If set to `true`, `--no-default-features` will be used when collecting metadata."
        },
        "features": {
          "type": "array",
          "examples": [
            "some-feature"
          ],
          "items": {
            "type": "string"
          },
          "description": "If set, and `--features` is not specified on the cmd line, these features will be used when\ncollecting metadata.\n"
        },
        "exclude-dev": {
          "type": "boolean",
          "description": "If set to `true`, all `dev-dependencies`, even one for workspace crates, are not included\nin the crate graph used for any of the checks. This option can also be enabled on cmd line\nwith `--exclude-dev` either [before](https://embarkstudios.github.io/cargo-deny/cli/common.html#--exclude-dev)\nor [after](https://embarkstudios.github.io/cargo-deny/cli/check.html#--exclude-dev)\nthe `check` subcommand.\n"
        }
      },
      "description": "The graph table configures how the dependency graph is constructed and thus which crates the\nchecks are performed against\n"
    },
    "IgnoreReason": {
      "type": "string",
      "description": "Free-form string that can be used to describe the reason why the advisory is ignored."
    },
    "LintLevel": {
      "type": "string",
      "enum": [
        "deny",
        "warn",
        "allow"
      ],
      "x-taplo": {
        "docs": {
          "enumValues": [
            "Emit an error with details about the problem, and fail the check.",
            "Print a warning for each propblem, but don't fail the check.",
            "Print a note about the problem, but don't fail the check."
          ]
        }
      }
    },
    "Output": {
      "type": "object",
      "properties": {
        "feature-depth": {
          "type": "integer",
          "description": "The maximum depth that features will be displayed when inclusion graphs are shown in\ndiagnostics, unless specified via `--feature-depth` on the command line. Only applies to\ndiagnostics that actually print features.\n",
          "default": 1
        }
      },
      "description": "The output table provides options for how/if diagnostics are outputted"
    },
    "PackageSpec": {
      "type": "string",
      "description": "Many configuration options require a package specifier at a minimum, which we'll describe here.\nThe options that use package specifiers will be called out in their individual documentation.\nWe'll use the [`bans.deny`](bans/cfg.md#the-deny-field-optional) option in the following examples.\n\n### String format\n\nIf the particular only requires a package spec at a minimum, then the string format can be used,\nwhich comes in three forms.\n\n#### Simple\n\n```toml\n# Will match any version of the simple crate\ndeny = [\"simple\"]\n```\n\nThe simplest string is one which is just the crate name. In this case, the version requirement\nused when checking will be `*` meaning it will match against all versions of that crate in the graph.\n\n#### With Version Requirements\n\n```toml\n# Will match only these versions of the simple crate that match the predicate(s)\ndeny = [\"simple:<=0.1,>0.2\"]\n```\n\nIf you want to apply version requirements (predicates) to the crate, simply append them following\na `:` separator.\n\n#### Exact\n\n```toml\n# Will match only this exact version of the simple crate\ndeny = [\n    \"simple@0.1.0\",\n    # This is semantically equivalent to the above\n    \"simple:=0.1.0\",\n]\n```\n\nThe exact form is a specialization of the version requirements, where the semver after the `@`\nis transformed to be [= (Exact)](https://docs.rs/semver/latest/semver/enum.Op.html#opexact).\n\n### Table format\n\n#### Crate format\n\n```toml\ndeny = [\n    { crate = \"simple@0.1.0\" }, # equivalent to \"simple@0.1.0\"\n    { crate = \"simple\", wrappers = [\"example\"] },\n]\n```\n\nThe crate format is a replacement for the old `name` and/or `version` table format. It uses\nthe string format described above in a single `crate` key.\n\n#### Old format\n\n```toml\ndeny = [\n    { name = \"simple\" },\n    { name = \"simple\", version = \"*\" }\n    { name = \"simple\", wrappers = [\"example\"] }\n]\n```\n\nThe old format uses a required `name` key and an optional `version` key. This format is deprecated\nand should not be used.\n"
    },
    "Target": {
      "oneOf": [
        {
          "name": "String",
          "$ref": "#/definitions/TargetString"
        },
        {
          "name": "Advanced",
          "$ref": "#/definitions/TargetAdvanced"
        }
      ]
    },
    "TargetAdvanced": {
      "type": "object",
      "examples": [
        {
          "triple": "aarch64-apple-darwin"
        },
        {
          "triple": "x86_64-pc-windows-msvc",
          "features": [
            "some-feature"
          ]
        }
      ],
      "properties": {
        "triple": {
          "$ref": "#/definitions/TargetString"
        },
        "features": {
          "type": "string",
          "description": "Rust `cfg()` expressions support the [`target_feature = \"feature-name\"`](https://doc.rust-lang.org/reference/attributes/codegen.html#the-target_feature-attribute)\npredicate, but at the moment, the only way to actually pass them when compiling is to use\nthe `RUSTFLAGS` environment variable. The `features` field allows you to specify 1 or more\n`target_feature`s you plan to build with, for a particular target triple. At the time of\nthis writing, cargo-deny does not attempt to validate that the features you specify are\nactually valid for the target triple, but this is [planned](https://github.com/EmbarkStudios/cfg-expr/issues/1).\n"
        }
      },
      "required": [
        "triple"
      ],
      "description": "Advanced configurations to apply for the target triple"
    },
    "TargetString": {
      "type": "string",
      "examples": [
        "x86_64-unknown-linux-gnu",
        "x86_64-pc-windows-msvc",
        "aarch64-apple-darwin"
      ],
      "description": "The [target triple](https://forge.rust-lang.org/release/platform-support.html) for the target\nyou wish to filter target specific dependencies with. If the target triple specified is **not**\none of the targets builtin to `rustc`, the configuration check for that target will be limited\nto only the raw `[target.<target-triple>.dependencies]` style of target configuration, as `cfg()`\nexpressions require us to know the details about the target.\n"
    }
  },
  "$id": "https://github.com/EmbarkStudios/cargo-deny/deny.schema.json",
  "$schema": "https://json-schema.org/draft-07/schema#",
  "description": "Full documentation is at https://embarkstudios.github.io/cargo-deny/checks/cfg.html",
  "properties": {
    "advisories": {
      "$ref": "#/definitions/Advisories"
    },
    "graph": {
      "$ref": "#/definitions/Graph"
    },
    "output": {
      "$ref": "#/definitions/Output"
    }
  },
  "title": "Configuration file for cargo-deny, by default called `deny.toml`.",
  "type": "object"
}