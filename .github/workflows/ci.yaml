on: [push, pull_request]
name: CI
jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      # make sure all code has been formatted with rustfmt
      - run: rustup component add rustfmt
      - name: check rustfmt
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: -- --check --color always

      # run clippy to verify we have no warnings
      - run: rustup component add clippy
      - name: cargo fetch
        uses: actions-rs/cargo@v1
        with:
          command: fetch
      - name: cargo clippy
        uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: --lib --tests -- -D warnings

  test:
    name: Test
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macOS-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v1
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
      - name: cargo fetch
        uses: actions-rs/cargo@v1
        with:
          command: fetch
      - name: cargo test build
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --tests
      - name: cargo test
        uses: actions-rs/cargo@v1
        with:
          command: test

  self:
    name: Self Check
    strategy:
      matrix:
        os: [ubuntu-latest]
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
    runs-on: ${{ matrix.os }}
    env:
      TARGET: x86_64-unknown-linux-musl
    steps:
      - uses: actions/checkout@v1
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
          target: ${{ matrix.target }}
      - name: Install musl tools
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get install -y musl-tools
      - name: cargo fetch
        uses: actions-rs/cargo@v1
        with:
          command: fetch
          args: --target ${{ matrix.target }}
      - name: cargo install
        uses: actions-rs/cargo@v1
        with:
          command: install
          # Install in debug mode since this part is sloooooow and
          # release doesn't really matter much for runtime
          # Also, build and run with musl, this lets us ensure that
          # musl still works, which is important for the linux binaries
          # we release, but wasn't exercised until now
          args: --path . --debug --target ${{ matrix.target }}
      - name: self check
        uses: actions-rs/cargo@v1
        with:
          command: deny
          args: -L debug check

  # publish-check:
  #   name: Publish Check
  #   runs-on: ubuntu-latest
  #   steps:
  #   - uses: actions/checkout@v1
  #   - uses: actions-rs/toolchain@v1
  #     with:
  #       toolchain: stable
  #       override: true
  #   - name: cargo fetch
  #     uses: actions-rs/cargo@v1
  #     with:
  #       command: fetch
  #   - name: cargo publish
  #     uses: actions-rs/cargo@v1
  #     with:
  #       command: publish
  #       args: --dry-run

  # publish:
  #   name: Publish
  #   needs: [test, self, publish-check]
  #   runs-on: ubuntu-latest
  #   if: startsWith(github.ref, 'refs/tags/')
  #   steps:
  #   - uses: actions/checkout@v1
  #   - uses: actions-rs/toolchain@v1
  #     with:
  #       toolchain: stable
  #       override: true
  #   - name: cargo fetch
  #     uses: actions-rs/cargo@v1
  #     with:
  #       command: fetch
  #   - name: cargo publish
  #     uses: actions-rs/cargo@v1
  #     env:
  #       CARGO_REGISTRY_TOKEN: ${{ secrets.CRATES_IO_TOKEN }}
  #     with:
  #       command: publish

  release:
    name: Release
    needs: [test, self]
    if: startsWith(github.ref, 'refs/tags/')
    strategy:
      matrix:
        os: [ubuntu-latest, macOS-latest, windows-latest]
        include:
          - os: ubuntu-latest
            rust: stable
            target: x86_64-unknown-linux-musl
            bin: cargo-deny
          - os: windows-latest
            rust: stable
            target: x86_64-pc-windows-msvc
            bin: cargo-deny.exe
          - os: macOS-latest
            rust: stable
            target: x86_64-apple-darwin
            bin: cargo-deny
    runs-on: ${{ matrix.os }}
    steps:
      - name: Install stable toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.rust }}
          override: true
          target: ${{ matrix.target }}
      - name: Install musl tools
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get install -y musl-tools
      - name: Checkout
        uses: actions/checkout@v1
      - name: cargo fetch
        uses: actions-rs/cargo@v1
        with:
          command: fetch
          args: --target ${{ matrix.target }}
      - name: Release build
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release --target ${{ matrix.target }}
      - name: Package
        shell: bash
        run: |
          name=cargo-deny
          tag=$(git describe --tags --abbrev=0)
          release_name="$name-$tag-${{ matrix.target }}"
          release_tar="${release_name}.tar.gz"
          mkdir "$release_name"

          if [ "${{ matrix.target }}" != "x86_64-pc-windows-msvc" ]; then
              strip "target/${{ matrix.target }}/release/${{ matrix.bin }}"
          fi

          cp "target/${{ matrix.target }}/release/${{ matrix.bin }}" "$release_name/"
          cp README.md LICENSE-APACHE LICENSE-MIT "$release_name/"
          tar czvf "$release_tar" "$release_name"

          rm -r "$release_name"

          # Windows environments in github actions don't have the gnu coreutils installed,
          # which includes the shasum exe, so we just use powershell instead
          if [ "${{ matrix.os }}" == "windows-latest" ]; then
            echo "(Get-FileHash \"${release_tar}\" -Algorithm SHA256).Hash | Out-File -Encoding ASCII -NoNewline \"${release_tar}.sha256\"" | pwsh -c -
          else
            echo -n "$(shasum -ba 256 "${release_tar}" | cut -d " " -f 1)" > "${release_tar}.sha256"
          fi
      - name: Publish
        uses: softprops/action-gh-release@v1
        with:
          draft: true
          files: 'cargo-deny*'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}